s_1 = "C语言中文网"

# ---- 使用正向索引截取
print('---- 使用正向索引截取', s_1)
# 取索引区间为[0,2]之间（不包括索引2处的字符）的字符串
print('s_1[:2]->', s_1[:2])

print('s_1[0:3]->', s_1[0:3])

print('s_1[3:]->', s_1[3:])

# 取整个字符串，此时 [] 中只需一个冒号即可
print('s_1[:]->', s_1[:])

print('---- 使用反向索引截取', s_1)
# ---- 使用反向索引截取
print('s_1[-2:-1]->', s_1[-2:-1])

print('s_1[-2:]->', s_1[-2:])
print('s_1[-5:-3]->', s_1[-5:-3])
print('s_1[-3:]->', s_1[-3:])

print('---- 使用步长', s_1)
# 隔 1 个字符取一个字符，区间是整个字符串
print('s_1[::2]->', s_1[::2])
# 隔 1 个字符取一个字符，区间是第2个到第4个
print('s_1[1:5:2]->', s_1[1:5:2])
print('s_1[:5:2]->', s_1[:5:2])
print('s_1[1::2]->', s_1[1::2])
print('s_1[-3::2]->', s_1[-3::2])
# 反向排序
print('s_1[::-1]->', s_1[::-1])
print('s_1[3::-1]->', s_1[3::-1])
print('s_1[-5::-1]->', s_1[-5::-1])
# 隔 1 个字符从右先左取一个字符，区间是整个字符串
print('s_1[::-2]->', s_1[::-2])
print('s_1[-5:-1:1]->', s_1[-5:-1:1])

# 当step为负数时，切片将其解释为从start出发以步长|step|逆序索引序列，此时，start和stop的截断依然遵循前述规则，但缺省发生一点变化，
# 因为我们说过，在缺省的情况下，Python的行为是尽可能取最大区间，此时访问是逆序的，start应尽量取大，stop应尽量取小，才能保证区间最大，因此：
# 按照扩充索引范围的观点，start的缺省值是无穷大()，stop的缺省值是无穷小()

print('s_1[1:5:-1]->', s_1[1:5:-1])  # 这种写法似乎不工作
print('s_1[5:1:-1]->', s_1[5:1:-1])
print('s_1[1::-1]->', s_1[1::-1])
print('s_1[-5:-1:-1]->', s_1[-5:-1:-1])  # 这种写法似乎不工作
print('s_1[-5:-7:-1]->', s_1[-5:-7:-1])
print('s_1[-5::-1]->', s_1[-5::-1])
# 对于step为负数时，start 和 end的value也要倒过来写，小的值放在end，大的值放到start
print('s_1[-3:-5:-1]->', s_1[-3:-5:-1])
# ----- 索引值越界的情况

print('----- 索引值越界的情况', s_1)
print('s_1[-100:-1]->', s_1[-100:-1])
print('s_1[3:100]->', s_1[3:100])
print('s_1[3:100:100]->', s_1[3:100:100])


# ----- slice对象
print('slice', slice(start=0, stop=100, step=-1))
