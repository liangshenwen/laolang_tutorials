s_1 = "0123456789"

# ---- 使用非负数索引截取
print('---- 使用正向索引截取', s_1)
# start使用默认值0
print('s_1[:2]->', s_1[:2])
# 取第0个位置到第3个位置之间值
print('s_1[0:3]->', s_1[0:3])
# end使用默认缺省值(序列的长度)
print('s_1[3:]->', s_1[3:])
# 取整个字符串，此时 [] 中只需一个冒号即可
print('s_1[:]->', s_1[:])

print('---- 使用负下标获取数据', s_1)
# ---- 使用负下标获取数据
print('s_1[-2:-1]->', s_1[-2:-1])
print('s_1[-2:]->', s_1[-2:])
print('s_1[-5:-3]->', s_1[-5:-3])
print('s_1[-3:]->', s_1[-3:])

print('---- 使用步长', s_1)
# 步长为正数, 当step为负数时，切片将其解释为从start出发以步长|step|正序索引序列，也就是说start的值小于end的值
print('s_1[::2]->', s_1[::2])
print('s_1[1:5:2]->', s_1[1:5:2])
print('s_1[:5:2]->', s_1[:5:2])
print('s_1[1::2]->', s_1[1::2])

# 步长为负数。当step为负数时，切片将其解释为从start出发以步长|step|逆序索引序列，也就是说start的值大于end的值

print('s_1[-3::2]->', s_1[-3::2])
# 反向排序

print('s_1[::-1]->', s_1[::-1])
print('s_1[3::-1]->', s_1[3::-1])
print('s_1[-5::-1]->', s_1[-5::-1])
print('s_1[::-2]->', s_1[::-2])
print('s_1[-5:-1:1]->', s_1[-5:-1:1])
# 如果步长为负数，那么start的值大于end的值，否则将会无法获取到数据
print('s_1[1:5:-1]->', s_1[1:5:-1])
print('s_1[5:1:-1]->', s_1[5:1:-1])
print('s_1[1::-1]->', s_1[1::-1])
# 如果步长为负数，那么start的值大于end的值，否则将会无法获取到数据
print('s_1[-5:-1:-1]->', s_1[-5:-1:-1])
print('s_1[-5:-7:-1]->', s_1[-5:-7:-1])
print('s_1[-5::-1]->', s_1[-5::-1])
print('s_1[-3:-5:-1]->', s_1[-3:-5:-1])

# 当step为负数时，切片将其解释为从start出发以步长|step|逆序索引序列，此时，start和stop的截断依然遵循前述规则，但缺省发生一点变化，
# 因为我们说过，在缺省的情况下，Python的行为是尽可能取最大区间，此时访问是逆序的，start应尽量取大，stop应尽量取小，才能保证区间最大，因此：
# 按照扩充索引范围的观点，start的缺省值是无穷大()，stop的缺省值是无穷小()
# ----- 索引值越界的情况

print('----- 索引值越界的情况', s_1)
print('s_1[-100:-1]->', s_1[-100:-1])
print('s_1[3:100]->', s_1[3:100])
print('s_1[3:100:100]->', s_1[3:100:100])
print('s_1[-100:-500]->', s_1[-100:-500])
print('s_1[100:500]->', s_1[100:500])

print('---------使用slice对象')
# ----- slice对象
# start=0, end=5, step=2
print('s_1[slice(start=0, stop=5, step=2)]->', s_1[slice(0, 5, 2)])
# start=0, end=5, step=1
print('s_1[slice(5)]->', s_1[slice(5)])


print('------ 使用切片来更新数据')

s_2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
s_2[0:5] = [10, 11, 12, 13, 14]
print(s_2)
s_2[::-2] = [-1, -2, -3, -4, -5]
print(s_2)
# 在尾部追加新的序列
s_2[len(s_2):len(s_2)] = range(100, 106)
print(s_2)
# 在尾部追加新的序列
s_2 += range(106, 111)
print(s_2)
# 在尾部追加新的序列
s_2.extend(range(111, 116))
print(s_2)